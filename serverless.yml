service: candidate-api

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  stage: dev
  deploymentBucket:
    name: ${self:provider.environment.S3_BUCKET}
  environment:
    DYNAMODB_TABLE: ${opt:stage, self:provider.stage}-candidate-table
    S3_BUCKET: ${opt:stage, self:provider.stage}-candidate-bucket
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}*'

functions:
  createCandidate:
    handler: src/api/create.candidate
    events:
      - http:
          path: candidate
          method: post
          cors: true
          authorizer:
            name: tokenAuthorizer
            type: token
            resultTtlInSeconds: 0
            identitySource: method.request.header.authorizationToken
          request:
            schema:
              application/json: ${file(./src/validator/candidate.json)}
  createAppointment:
    handler: src/api/create.appointment
    events:
      - http:
          path: appointment/{id}
          method: put
          cors: true
          authorizer:
            name: requestAuthorizer
            type: request
            resultTtlInSeconds: 60
            identitySource: method.request.header.authorizationToken
          request:
            schema:
              application/json: ${file(./src/validator/appointment.json)}
  listCandidates:
    handler: src/api/list.candidates
    events:
      - http:
          path: candidate
          method: get
          cors: true
  listAppointments:
    handler: src/api/list.appointments
    events:
      - http:
          path: candidate/{id}
          method: get
          cors: true
  listAvailability:
    handler: src/api/list.availability
    events:
      - http:
          path: availability
          method: get
          cors: true
  getAppointment:
    handler: src/api/get.appointment
    events:
      - http:
          path: appointment/{id}
          method: get
          cors: true
  getAvailability:
    handler: src/api/get.availability
    events:
      - http:
          path: availability/{id}
          method: get
          cors: true
  tokenAuthorizer:
    handler: src/validator/tokenAuthorizer.handler
  requestAuthorizer:
    handler: src/validator/requestAuthorizer.handler

plugins:
  - serverless-plugin-typescript
